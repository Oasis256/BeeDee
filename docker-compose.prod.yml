version: '3.8'

services:
  # High-Performance API Gateway (Go/Fiber)
  bee-gateway:
    build:
      context: https://github.com/Oasis256/BeeDee.git#main:services/bee-gateway
      dockerfile: Dockerfile
    container_name: BeeGateway
    hostname: bee-gateway
    ports:
      - "80:80"
    environment:
      - PORT=80
      - INTELLIGENCE_URL=http://bee-intelligence:8080
      - SOCIAL_URL=http://bee-social:4000
      - SCRAPER_URL=http://bee-scraper:3001
      - REDIS_HOST=bee-redis
      - REDIS_PORT=6379
    depends_on:
      - bee-intelligence
      - bee-social
      - bee-scraper
      - bee-redis
      - bee-db
    networks:
      - bee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML & Analysis Service (Python/FastAPI)
  bee-intelligence:
    build:
      context: https://github.com/Oasis256/BeeDee.git#main:services/bee-intelligence
      dockerfile: Dockerfile
    container_name: BeeIntelligence
    hostname: bee-intelligence
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - REDIS_HOST=bee-redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=bee-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=intelligence_db
      - POSTGRES_USER=beeuser
      - POSTGRES_PASSWORD=beepass
    volumes:
      - intelligence_data:/app/data
      - intelligence_models:/app/models
    depends_on:
      - bee-db
      - bee-redis
    networks:
      - bee-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Real-time Social Service (Elixir/Phoenix)
  bee-social:
    build:
      context: https://github.com/Oasis256/BeeDee.git#main:services/bee-social
      dockerfile: Dockerfile
    container_name: BeeSocial
    hostname: bee-social
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - REDIS_HOST=bee-redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=bee-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=social_db
      - POSTGRES_USER=beeuser
      - POSTGRES_PASSWORD=beepass
      - SECRET_KEY_BASE=your-secret-key-base-here-make-it-long-and-random
    volumes:
      - social_data:/app/data
    depends_on:
      - bee-db
      - bee-redis
    networks:
      - bee-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Web Scraping Service (Node.js/Puppeteer)
  bee-scraper:
    build:
      context: https://github.com/Oasis256/BeeDee.git#main:services/bee-scraper
      dockerfile: Dockerfile
    container_name: BeeScraper
    hostname: bee-scraper
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - REDIS_HOST=bee-redis
      - REDIS_PORT=6379
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    volumes:
      - scraper_cache:/app/cache
      - scraper_logs:/app/logs
    depends_on:
      - bee-redis
    networks:
      - bee-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  bee-db:
    image: postgres:15-alpine
    container_name: BeeDatabase
    hostname: bee-db
    environment:
      - POSTGRES_DB=bee_main
      - POSTGRES_USER=beeuser
      - POSTGRES_PASSWORD=beepass
      - POSTGRES_MULTIPLE_DATABASES=intelligence_db,social_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
    networks:
      - bee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U beeuser -d bee_main"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  bee-redis:
    image: redis:7-alpine
    container_name: BeeRedis
    hostname: bee-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - bee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Monitoring & Observability (Optional)
  bee-monitor:
    image: prom/prometheus:latest
    container_name: BeeMonitor
    hostname: bee-monitor
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bee-network
    restart: unless-stopped
    depends_on:
      - bee-gateway
      - bee-intelligence
      - bee-social
      - bee-scraper

networks:
  bee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # Service-specific volumes
  intelligence_data:
    driver: local
  intelligence_models:
    driver: local
  social_data:
    driver: local
  scraper_cache:
    driver: local
  scraper_logs:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
