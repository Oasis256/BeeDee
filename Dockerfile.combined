# Combined Frontend + Backend Dockerfile with Nginx
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --prefer-offline --no-audit --loglevel=error --no-fund

# Copy source code
COPY . .

# Set environment variable for the build
ENV VITE_API_URL=/api

# Build the frontend
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Install Node.js for the backend
RUN apk add --no-cache nodejs npm

# Set working directory for backend
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies for backend
RUN npm ci --omit=dev --prefer-offline --no-audit --loglevel=error --no-fund

# Copy source code
COPY . .

# Copy built frontend from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create data directory
RUN mkdir -p /app/data

# Create startup script
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Starting backend server..."' >> /app/start.sh && \
    echo 'node server.js &' >> /app/start.sh && \
    echo 'echo "Starting nginx..."' >> /app/start.sh && \
    echo 'nginx -g "daemon off;"' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expose port 80
EXPOSE 80

# Start both services
CMD ["/app/start.sh"]
