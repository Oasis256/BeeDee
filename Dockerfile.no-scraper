# Dockerfile without scraper (for fallback)
FROM node:20-alpine AS builder

# Accept build argument
ARG VITE_API_URL=/api

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm config set registry https://registry.npmjs.org/ && \
    npm ci --prefer-offline --no-audit --loglevel=error --no-fund --retry 3 --timeout 60000

# Copy source code
COPY . .

# Set environment variable for the build
ENV VITE_API_URL=$VITE_API_URL

# Build the frontend (without running scraper)
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Install Node.js for the backend
RUN apk add --no-cache nodejs npm

# Set working directory for backend
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies for backend
RUN npm config set registry https://registry.npmjs.org/ && \
    npm ci --omit=dev --prefer-offline --no-audit --loglevel=error --no-fund --retry 3 --timeout 60000

# Copy source code
COPY . .

# Copy built frontend from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create data directory
RUN mkdir -p /app/data

# Create startup script that runs scraper at runtime if needed
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Checking for data file..."' >> /app/start.sh && \
    echo 'if [ ! -f /usr/share/nginx/html/all-sex-positions.json ]; then' >> /app/start.sh && \
    echo '  echo "No data file found, attempting to run scraper..."' >> /app/start.sh && \
    echo '  if command -v node >/dev/null 2>&1; then' >> /app/start.sh && \
    echo '    echo "Running scraper..."' >> /app/start.sh && \
    echo '    node scrape-sex-positions.js && cp all-sex-positions.json /usr/share/nginx/html/ 2>/dev/null || echo "Scraper failed, using fallback data"' >> /app/start.sh && \
    echo '  else' >> /app/start.sh && \
    echo '    echo "Node.js not available, using fallback data"' >> /app/start.sh && \
    echo '  fi' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo 'echo "Starting backend server..."' >> /app/start.sh && \
    echo 'node server.js &' >> /app/start.sh && \
    echo 'echo "Starting nginx..."' >> /app/start.sh && \
    echo 'nginx -g "daemon off;"' >> /app/start.sh && \
    chmod +x /app/start.sh

# Expose port 80
EXPOSE 80

# Start both services
CMD ["/app/start.sh"]
